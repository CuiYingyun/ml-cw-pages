# 工作流的名称
name: Deploy MkDocs Site

# 触发工作流的事件
# on: push 表示当有代码推送到仓库时触发
on:
  push:
    # branches: [main] 表示只在 main 分支发生 push 事件时触发
    branches:
      - main
  # 允许你从 Actions 标签页手动触发这个工作流
  workflow_dispatch:

# 权限设置
# 允许这个工作流对仓库进行写操作，这是将构建好的静态文件推送到 gh-pages 分支所必需的
permissions:
  contents: write

# 工作流中运行的任务（jobs）
jobs:
  # 定义一个名为 deploy 的任务
  deploy:
    # 指定任务运行的操作系统环境，这里使用最新的 Ubuntu
    runs-on: ubuntu-latest

    # 任务的步骤（steps）
    steps:
      # 第 1 步：检出代码
      # 使用官方的 checkout action 来获取你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第 2 步：设置 Python 环境
      # 使用官方的 setup-python action 来配置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # 指定使用的 Python 版本，与你的本地环境保持一致
          python-version: 3.12

      # 第 3 步：安装依赖
      # 运行 pip 命令来安装 mkdocs-material
      - name: Install dependencies
        run: pip install mkdocs-material==9.5.18

      - name: Add for custom domain
        run: echo 'ml.caveman.work' > public/CNAME

      # 第 4 步：构建和部署
      # 使用 mkdocs gh-deploy 命令
      # 这个命令会自动构建静态网站，并将其推送到 gh-pages 分支
      # --force 参数表示强制推送，会覆盖 gh-pages 分支上已有的内容
      # --clean 参数表示在构建前先清理旧的构建文件
      # user.name 和 user.email 是 git commit 所需的配置
      - name: Deploy to GitHub Pages
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdocs gh-deploy --force --clean
